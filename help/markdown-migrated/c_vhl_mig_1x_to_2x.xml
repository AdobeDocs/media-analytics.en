<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_kyj_mzq_hbb">
 <title>VHL 1.x to 2.x Migration</title>
 <shortdesc></shortdesc>
 <conbody>
  <section id="section_pln_1jl_mbb">
   <title>Migration Overview</title>
   <p>The migration from VHL 1.x to VHL 2.x is straightforward, with the new version featuring
    simplified APIs for initialization, configuration, and player delegates.</p>
   <p>Here are the primary differences between 1.x and 2.x:</p>
   <p>
    <ul id="ul_fqh_4q1_s1b">
     <li><b>Plugins, Delegates</b> - You no longer need to implement plugins and delegates for
      Analytics, VideoPlayer, and Heartbeat. </li>
     <li><b>Configuration</b> - You no longer need to instantiate configurations for the 1.x
      plugins. </li>
    </ul>
   </p>
   <p>In versions 2.x, all of the public methods are consolidated into the
          <codeph>MediaHeartbeat</codeph> class to make it easier on developers. Also, all configs
        are now consolidated into the <codeph>MediaHeartbeatConfig</codeph> class. These new APIs
        are described in detail here: <xref href="#concept_kyj_mzq_hbb/section_zqc_bjl_mbb"
          format="dita"/>. </p>
   <p>In version 2.x, you do not need to implement plugins or delegates for Analytics, VideoPlayer,
    or Heartbeat. Also, you no longer need to instantiate configs for all of these plugins. In the
    2.x SDK you only need to instantiate the <codeph>MediaHeartbeat</codeph> class with
     <codeph>MediaHeartbeatDelegate</codeph> and <codeph>MediaHeartbeatConfig</codeph> instances.
    This is the only implementation that is required to initialize Video Analytics. </p>
   <p>With the initialization of <codeph>MediaHeartbeat</codeph>, you can safely delete all of the
        implementation for Analytics Plugin, VideoPlayer Plugin and Heartbeat Plugin. Also, remove
        all the existing implementation for VideoHeartbeat initialization that takes in an array of
        plugins as an input. You can see side-by-side comparisons of the 1.x and 2.x implementations
        in <i>VHL Code Comparison: 1.x to 2.x</i>
      </p>
  </section>
  <section id="section_z4t_1jl_mbb">
   <title>VHL Code Comparison: 1.x to 2.x</title>
   <p>All of the VHL configuration parameters and tracking APIs are now consolidated into the
     <codeph>MediaHeartbeats</codeph> and <codeph>MediaHeartbeatConfig</codeph> classes. </p>
   <p><b>Configuration API changes:</b></p>
   <ul id="ul_xkz_qxv_s1b">
    <li>
     <p><codeph>AdobeHeartbeatPluginConfig.sdk</codeph> - Renamed to
       <codeph>MediaConfig.appVersion</codeph></p>
    </li>
    <li>
     <p><codeph>MediaHeartbeatConfig.playerName</codeph> - Now set through
       <codeph>MediaHeartbeatConfig</codeph> instead of
      <codeph>VideoPlayerPluginDelegate</codeph></p>
    </li>
    <li>
     <p>(For JavaScript only): The <codeph>AppMeasurement</codeph> instance - Now sent through the
       <codeph>MediaHeartbeat</codeph> constructor.</p>
    </li>
   </ul>
   <p><b>Configuration properties changes:</b></p>
   <p>
    <ul id="ul_oqm_dcx_2bb">
     <li><codeph>sdk</codeph> - Renamed to <codeph>appVersion</codeph></li>
     <li><codeph>publisher</codeph> - Removed; Marketing Cloud Org ID is used instead as a
      publisher</li>
     <li><codeph>quiteMode</codeph> - Removed</li>
    </ul>
   </p>
   <p>The following tables provide side-by-side code comparisons between VHL 1.x and VHL 2.x,
    covering Initialization, Core Playback, Ad Playback, Chapter Playback, and some additional
     events.<table id="table_ay5_rnw_2bb" outputclass="codescroll">
     <title>VHL Code Comparison: INITIALIZATION</title>
     <tgroup cols="2">
      <colspec colname="col1" colnum="1" align="left"/>
      <colspec colname="col2" colnum="2" align="left"/>
      <thead>
       <row>
        <entry align="center">VHL 1.x API </entry>
        <entry align="center">VHL 2.x API</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry align="left">
         <p><i><b>Object Initialization</b></i></p>
         <p><b>1.x:</b></p>
         <p>
          <ul id="ul_ebb_cpw_2bb">
           <li><codeph>Heartbeat()</codeph></li>
           <li><codeph>VideoPlayerPlugin() </codeph></li>
           <li><codeph>AdobeAnalyticsPlugin() </codeph></li>
           <li><codeph>HeartbeatPlugin()</codeph></li>
          </ul>
         </p>
        </entry>
        <entry align="left">
         <p>... </p>
         <p><b>2.x:</b></p>
         <p>
          <ul id="ul_bck_dpw_2bb">
           <li><codeph>MediaHeartbeat()</codeph></li>
           <li><codeph>MediaHeartbeatConfig()</codeph></li>
          </ul>
         </p>
        </entry>
       </row>
       <row>
        <entry>
         <p><b>Set up the video player plugin:
           </b><codeblock scale="80" outputclass="syntax javascript">this._playerPlugin = 
 new VideoPlayerPlugin(
    new SampleVideoPlayerPluginDelegate(this._player));
var playerPluginConfig = 
  new VideoPlayerPluginConfig();
playerPluginConfig.debugLogging = true; 

// Set up the AppMeasurement plugin
this._aaPlugin = 
 new AdobeAnalyticsPlugin(
    appMeasurement, 
    new SampleAdobeAnalyticsPluginDelegate());
var aaPluginConfig = new AdobeAnalyticsPluginConfig();

aaPluginConfig.channel = 
  Configuration.HEARTBEAT.CHANNEL;

aaPluginConfig.debuglogging = true; 
this._aaPlugin.configure(aaPluginConfig); 

// Set up the AdobeHeartbeat plugin
var ahPlugin = 
  new AdobeHeartbeatPlugin(
    new SampleAdobeHeartbeatPluginDelegate());
var ahPluginConfig = new AdobeHeartbeatPluginConfig(
    configuration.HEARTBEAT.TRACKING_SERVER,
    configuration.HEARTBEAT.PUBLISHER);
ahPluginConfig.ovp = configuration.HEARTBEAT.OVP;
ahPluginConfig.sdk = configuration.HEARTBEAT.SDK;
ahPluginConfig.debugLogging = true; 
ahPlugin.configure(ahPluginConfig);

var plugins = 
  [this._playerPlugin, this._aaPlugin, ahPlugin];

// Set up and configure the heartbeat library
this._heartbeat = 
 new Heartbeat(new SampleHeartbeatDelegate(), 
               plugins);
var configData = new HeartbeatConfig();
configData.debugLogging = true; 
this._heartbeat.configure(configData);</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L58"
           format="html" scope="external">1.x Sample Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><b>Media Heartbeat initialization:
           </b><codeblock scale="80" outputclass="syntax javascript">
var mediaConfig = 
  new MediaHeartbeatConfig();
mediaConfig.trackingServer = 
  Configuration.HEARTBEAT.TRACKING_SERVER; 
mediaConfig.playerName = 
  Configuration.PLAYER.NAME;
mediaConfig.debugLogging = true;
mediaConfig.channel = 
  Configuration.HEARTBEAT.CHANNEL;
mediaConfig.ssl = false;
mediaConfig.ovp = 
  Configuration.HEARTBEAT.OVP;
mediaConfig.appVersion = 
  Configuration.HEARTBEAT.SDK;

this._mediaHeartbeat = new MediaHeartbeat(
     new SampleMediaHeartbeatDelegate(this._player),
     mediaConfig, 
     appMeasurement);</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L47"
           format="html" scope="external">2.x Sample Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry align="left">
         <p><i><b>Delegates</b></i></p>
         <p><b>1.x:</b></p>
         <p>
          <ul id="ul_qdt_bqw_2bb">
           <li><codeph>VideoPlayerPluginDelegate()</codeph></li>
           <li><codeph>VideoPlayerPluginDelegate().getVideoInfo</codeph></li>
           <li><codeph>VideoPlayerPluginDelegate().getAdBreakInfo</codeph></li>
           <li><codeph>VideoPlayerPluginDelegate().getAdInfo</codeph></li>
           <li><codeph>VideoPlayerPluginDelegate().getChapterInfo</codeph></li>
           <li><codeph>VideoPlayerPluginDelegate().getQoSInfo</codeph></li>
           <li><codeph>VideoPlayerPluginDelegate().get.onError</codeph></li>
           <li><codeph>AdobeAnalyticsPluginDelegate()</codeph></li>
           <li><codeph>AdobeHeartbeatPluginDelegate()</codeph></li>
          </ul>
         </p>
        </entry>
        <entry align="left">
         <p>... </p>
         <p><b>2.x:</b></p>
         <p>
          <ul id="ul_ans_cqw_2bb">
           <li><codeph>MediaHeartbeatDelegate()</codeph></li>
           <li><codeph>MediaHeartbeatDelegate().getCurrentPlaybackTime</codeph></li>
           <li><codeph>MediaHeartbeatDelegate().getQoSObject</codeph></li>
          </ul>
         </p>
        </entry>
       </row>
       <row>
        <entry>
         <p><b>VideoPlayerPluginDelegate:
           </b><codeblock scale="80" outputclass="syntax javascript">
$.extend(SampleVideoPlayerPluginDelegate.prototype, 
         VideoPlayerPluginDelegate.prototype);

function SampleVideoPlayerPluginDelegate(player) {
    this._player = player;
}

SampleVideoPlayerPluginDelegate.prototype.getVideoInfo = 
  function() { 
      return this._player.getVideoInfo(); 
  };

SampleVideoPlayerPluginDelegate.prototype.getAdBreakInfo = 
  function() { 
      return this._player.getAdBreakInfo(); 
  };

SampleVideoPlayerPluginDelegate.prototype.getAdInfo = 
  function() { 
      return this._player.getAdInfo(); 
  };

SampleVideoPlayerPluginDelegate.prototype.getChapterInfo = 
  function() { 
      return this._player.getChapterInfo(); 
  };

SampleVideoPlayerPluginDelegate.prototype.getQoSInfo = 
  function() { 
      return this._player.getQoSInfo(); 
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.video.player.plugin.delegate.js#L17"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
         <p><b>AdobeAnalyticsPluginDelegate:
           </b><codeblock scale="80" outputclass="syntax javascript">
$.extend(SampleAdobeAnalyticsPluginDelegate.prototype, 
         AdobeAnalyticsPluginDelegate.prototype);

function SampleAdobeAnalyticsPluginDelegate() {}

SampleAdobeAnalyticsPluginDelegate.prototype.onError = 
  function(errorInfo) {
      console.log("AdobeAnalyticsPlugin error: " + 
                   errorInfo.getMessage() + 
                   " | " + 
                   errorInfo.getDetails());
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.adobe.analytics.plugin.delegate.js#L17"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
         <p><b>HeartbeatDelegate:
           </b><codeblock scale="80" outputclass="syntax javascript">
$.extend(SampleHeartbeatDelegate.prototype, 
         HeartbeatDelegate.prototype);

function SampleHeartbeatDelegate() {}

SampleHeartbeatDelegate.prototype.onError = 
  function(errorInfo) {
      console.log("Heartbeat error: " + 
                  errorInfo.getMessage() + 
                  " | " + 
                  errorInfo.getDetails());
};</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.heartbeat.delegate.js#L17"
           format="html" scope="external">Sample 1.x Player</xref></p>
        </entry>
        <entry>
         <p><b>MediaHeartbeatDelegate:
           </b><codeblock scale="80" outputclass="syntax javascript">
ADB.core.extend(SampleMediaHeartbeatDelegate.prototype, 
  MediaHeartbeatDelegate.prototype);

function SampleMediaHeartbeatDelegate(player) {
   this._player = player;
}

SampleMediaHeartbeatDelegate.prototype.getCurrentPlaybackTime = 
  function() {
      return this._player.getCurrentPlaybackTime();
  };

SampleMediaHeartbeatDelegate.prototype.getQoSObject = 
  function() {
      return this._player.getQoSInfo();
  };

this._mediaHeartbeat = 
  new MediaHeartbeat(new 
        SampleMediaHeartbeatDelegate(this._player), 
        mediaConfig, 
        appMeasurement);</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L57"
           format="js" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table></p>
   <p>
    <table id="table_emn_nbx_2bb" outputclass="codescroll">
     <title>VHL Code Comparison: CORE PLAYBACK</title>
     <tgroup cols="2">
      <colspec colname="col1" colnum="1" align="left"/>
      <colspec colname="col2" colnum="2" align="left"/>
      <thead>
       <row>
        <entry align="center">VHL 1.x</entry>
        <entry align="center">VHL 2.x</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <p><i><b>Session Start</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_jmn_nbx_2bb">
          <li><codeph>VideoPlayerPluginDelegate.trackVideoLoad()</codeph></li>
          <li><codeph>VideoPlayerPluginDelegate.getVideoInfo()</codeph>
          </li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_kmn_nbx_2bb">
          <li><codeph>MediaHeartbeat.createMediaObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackSessionStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock scale="80" outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    this._playerPlugin.trackVideoLoad();
};

SampleVideoPlayerPluginDelegate.prototype.getVideoInfo
  = function() {
    return this._player.getVideoInfo();
};

VideoPlayer.prototype.getVideoInfo = function() {
    this._videoInfo.playhead = vTime;
    return this._videoInfo;
};</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L107"
           format="html" scope="external">1.x Sample Player - trackVideoLoad()</xref></p>
         <p><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.video.player.plugin.delegate.js#L23"
           format="html" scope="external">1.x Sample Player - getVideoInfo()</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock scale="80" outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    var contextData = {};
    var videoInfo = this._player.getVideoInfo();
    var mediaInfo = 
      MediaHeartbeat.createMediaObject(
        videoInfo.name, 
        videoInfo.id, 
        videoInfo.length,
        videoInfo.streamType);

    this._mediaHeartbeat.trackSessionStart(
      mediaInfo, 
      contextData);
};</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L88"
           format="html" scope="external">2.x Sample Player - createMediaObject()</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Standard Video Metadata</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_b1y_zcs_fbb">
          <li><codeph>VideoMetadataKeys()</codeph></li>
          <li><codeph>AdobeAnalyticsPlugin.setVideoMetadata90</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_pyv_cds_fbb">
          <li><codeph>MediaHeartbeat.createMediaObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackSessionStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    console.log('Player event: VIDEO_LOAD');

    var contextData = {};
    // Setting Standard Video Metadata
    contextData[VideoMetadataKeys.SEASON] = 
      "sample season";
    contextData[VideoMetadataKeys.SHOW] = 
      "sample show";
    contextData[VideoMetadataKeys.EPISODE] = 
      "sample episode";
    contextData[VideoMetadataKeys.ASSET_ID] = 
      "sample asset id";
    contextData[VideoMetadataKeys.GENRE] = 
      "sample genre";
    contextData[VideoMetadataKeys.FIRST_AIR_DATE] = 
      "sample air date";
    // Etc.

    this._aaPlugin.setVideoMetadata(contextData);
    this._playerPlugin.trackVideoLoad();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L107"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    console.log('Player event: VIDEO_LOAD');
    var contextData = {};

    var mediaInfo = 
      MediaHeartbeat.createMediaObject(videoInfo.name, 
                                       videoInfo.id, 
                                       videoInfo.length,
                                       videoInfo.streamType);

    // Set standard Video Metadata
    var standardVideoMetadata = {};
    standardVideoMetadata[VideoMetadataKeys.SEASON] = 
      "sample season";
    standardVideoMetadata[VideoMetadataKeys.SHOW] = 
      "sample show";
    standardVideoMetadata[VideoMetadataKeys.EPISODE] = 
      "sample episode";
    standardVideoMetadata[VideoMetadataKeys.ASSET_ID] = 
      "sample asset id";
    standardVideoMetadata[VideoMetadataKeys.GENRE] = 
      "sample genre";
    standardVideoMetadata[VideoMetadataKeys.FIRST_AIR_DATE] = 
      "sample air date";
    // Etc.

    mediaInfo.setValue(MediaHeartbeat.MediaObjectKey.StandardVideoMetadata, 
                       standardVideoMetadata);

    this._mediaHeartbeat.trackSessionStart(mediaInfo, contextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L88"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note>Insetad of setting the Standard Video Metadata through the
           <codeph>AdobeAnalyticsPlugin.setVideoMetadata()</codeph> API, in VHL 2.0, the Standard
          Video Metadata is set through the MediaObject key
           <codeph>MediaObject.MediaObjectKey.StandardVideoMetadata()</codeph>.</note>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Custom Video Metadata</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_v4h_p2s_fbb">
          <li><codeph>VideoMetadataKeys()</codeph></li>
          <li><codeph>AdobeAnalyticsPlugin.setVideoMetadata()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_ywg_52s_fbb">
          <li><codeph>MediaHeartbeat.createMediaObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackSessionStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    var contextData = {
        isUserLoggedIn: "false",
        tvStation: "Sample TV station",
        programmer: "Sample programmer"
    };

    this._aaPlugin.setVideoMetadata(contextData);
    this._playerPlugin.trackVideoLoad();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L107"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    var contextData = {
        isUserLoggedIn: "false",
        tvStation: "Sample TV station",
        programmer: "Sample programmer"
    };

    var videoInfo = this._player.getVideoInfo();
    var mediaInfo = 
      MediaHeartbeat.createMediaObject(videoInfo.name, 
                                       videoInfo.id, 
                                       videoInfo.length,
                                       videoInfo.streamType);

    mediaInfo.setValue(MediaHeartbeat.MediaObjectKey.StandardVideoMetadata, 
                       standardVideoMetadata);

    this._mediaHeartbeat.trackSessionStart(mediaInfo, contextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L88"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note>Instead of setting the Custom Video Metadata through the
           <codeph>AdobeAnalyticsPlugin.setVideoMetadata()</codeph> API, in VHL 2.0, the Standard
          Video Metadata is set through the <codeph>MediaHeartbeat.trackSessionStart()</codeph>
          API.</note>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Playback</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_a12_4ks_fbb">
          <li><codeph>VideoPlayerPlugin.trackPlay()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_b12_4ks_fbb">
          <li><codeph> MediaHeartbeat.trackPlay()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onSeekStart = 
  function() {
    console.log('Player event: SEEK_START');
    this._playerPlugin.trackSeekStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L149"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onSeekStart = 
  function() {
    console.log('Player event: SEEK_START');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart);
};</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L127"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Pause</b></i></p>
         <p><b>1.x:</b><ul id="ul_nfb_mls_fbb">
           <li><codeph>VideoPlayerPlugin.trackPause()</codeph></li>
          </ul></p>
        </entry>
        <entry>
         <p>...</p>
         <p><b>2.x:</b><ul id="ul_wrq_4ls_fbb">
           <li><codeph>MediaHeartbeat.trackPausel()</codeph></li>
          </ul></p>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onPause = 
  function() { 
    console.log('Player event:X PAUSE'); 
    this._playerPlugin.trackPause(); 
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L144"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBufferComplete = 
  function() { 
    console.log('Player event: BUFFER_COMPLETE'); 
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete); 
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L142"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Seek Complete</b></i></p>
         <p><b>1.x:</b><ul id="ul_gby_fms_fbb">
           <li><codeph>VideoPlayerPlugin.trackSeekComplete()</codeph></li>
          </ul></p>
        </entry>
        <entry>
         <p>...</p>
         <p><b>2.x:</b><ul id="ul_hby_fms_fbb">
           <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete) </codeph></li>
          </ul></p>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onSeekComplete = 
  function() {
    console.log('Player event: SEEK_COMPLETE');
    this._playerPlugin.trackSeekComplete();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L154"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onSeekComplete = 
  function() {
    console.log('Player event: SEEK_COMPLETE');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L132"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Buffer Start </b></i></p>
         <p><b>1.x:</b><ul id="ul_vr2_wms_fbb">
           <li><codeph>VideoPlayerPlugin.trackBufferStart()</codeph></li>
          </ul></p>
        </entry>
        <entry>
         <p>...</p>
         <p><b>2.x:</b><ul id="ul_wr2_wms_fbb">
           <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferStart) </codeph></li>
          </ul></p>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBufferStart = 
  function() {
    console.log('Player event: BUFFER_START');
    this._playerPlugin.trackBufferStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L159"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBufferStart = 
  function() {
    console.log('Player event: BUFFER_START');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferStart);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L137"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Buffer Complete </b></i></p>
         <p><b>1.x:</b><ul id="ul_e4z_lns_fbb">
           <li><codeph>VideoPlayerPlugin.trackBufferComplete()</codeph></li>
          </ul></p>
        </entry>
        <entry>
         <p>...</p>
         <p><b>2.x:</b><ul id="ul_f4z_lns_fbb">
           <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete) </codeph></li>
          </ul></p>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBufferComplete = 
  function() {
    console.log('Player event: BUFFER_COMPLETE');
    this._playerPlugin.trackBufferComplete();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L164"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBufferComplete = 
  function() {
    console.log('Player event: BUFFER_COMPLETE');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L142"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Playback Complete </b></i></p>
         <p><b>1.x:</b><ul id="ul_vd5_14s_fbb">
           <li><codeph>VideoPlayerPlugin.trackComplete()</codeph></li>
          </ul></p>
        </entry>
        <entry>
         <p>...</p>
         <p><b>2.x:</b><ul id="ul_wd5_14s_fbb">
           <li><codeph>MediaHeartbeat.trackComplete()</codeph></li>
          </ul></p>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onComplete = 
  function() {
    console.log('Player event: COMPLETE');
    this._playerPlugin.trackComplete(function() {
        console.log(
          "The completion of the content has been tracked.");
    });
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L203"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onComplete = 
  function() {
    console.log('Player event: COMPLETE');
    this._mediaHeartbeat.trackComplete();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L197"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </p>
   <p>
    <table outputclass="codescroll" id="table_rsr_1qs_fbb">
     <title>VHL Code Comparison: AD PLAYBACK</title>
     <tgroup cols="2">
      <colspec colname="col1" colnum="1" align="left"/>
      <colspec colname="col2" colnum="2" align="left"/>
      <thead>
       <row>
        <entry align="center">VHL 1.x</entry>
        <entry align="center">VHL 2.x</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <p><i><b>Ad Start</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_vsr_1qs_fbb">
          <li><codeph>VideoPlayerPlugin.trackAdStart()</codeph></li>
          <li><codeph>VideoPlayerPluginDelegate.getAdBreakInfo()</codeph></li>
          <li><codeph>VideoPlayerPluginDelegate.getAdInfo()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_wsr_1qs_fbb">
          <li><codeph>MediaHeartbeat.createAdBreakObject()</codeph></li>
          <li><codeph>MediaHeartbeat.createAdObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdBreakStart) </codeph></li>
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdStart) </codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdStart = 
  function() {
    console.log('Player event: AD_START');
    this._playerPlugin.trackAdStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L169"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
         <p><codeblock outputclass="syntax javascript">SampleVideoPlayerPluginDelegate.prototype.getAdInfo = 
  function() {
    return this._player.getAdInfo();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.video.player.plugin.delegate.js#L31"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdStart = 
  function() {
    console.log('Player event: AD_START');
    var adContextData = {};

    // AdBreak Info - getting the adBreakInfo from player and creating 
    // AdBreakInfo Object from MediaHeartbeat
    var _adBreakInfo = this._player.getAdBreakInfo();
    var adBreakInfo = 
      MediaHeartbeat.createAdBreakObject(_adBreakInfo.name, 
                                         _adBreakInfo.position, 
                                         _adBreakInfo.startTime);

    // Ad Info - getting the adInfo from player and creating 
    // AdInfo Object from MediaHeartbeat
    var _adInfo = this._player.getAdInfo();
    var adInfo = MediaHeartbeat.createAdObject(_adInfo.name, 
                                               _adInfo.id, 
                                               _adInfo.position, 
                                               _adInfo.length);

    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdBreakStart, 
                                    adBreakInfo);
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdStart, 
                                    adInfo, 
                                    adContextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L147"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Standard Ad Metadata</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_ijq_wqs_fbb">
          <li><codeph>AdMetadataKeys()</codeph></li>
          <li><codeph>AdobeAnalyticsPlugin.setAdMetadata()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_jjq_wqs_fbb">
          <li><codeph>MediaHeartbeat.createAdObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackAdStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdStart = 
  function() {
    console.log('Player event: AD_START');

    var contextData = {};
    // setting Standard Ad Metadata
    contextData[AdMetadataKeys.ADVERTISER] = 
      "sample advertiser";
    contextData[AdMetadataKeys.CAMPAIGN_ID] = 
      "sample campaign";
    contextData[AdMetadataKeys.CREATIVE_ID] = 
      "sample creative";
    contextData[AdMetadataKeys.CREATIVE_URL] = 
      "sample url";
    contextData[AdMetadataKeys.SITE_ID] = 
      "sample site";
    contextData[AdMetadataKeys.PLACEMENT_ID] = 
      "sample placement";

    this._aaPlugin.setAdMetadata(contextData);
    this._playerPlugin.trackAdStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L169"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdStart = 
  function() {
    console.log('Player event: AD_START');
    var adContextData = { };

    // AdBreak Info - getting the adBreakInfo from player and creating 
    // AdBreakInfo Object from MediaHeartbeat
    var _adBreakInfo = this._player.getAdBreakInfo();
    var adBreakInfo = 
      MediaHeartbeat.createAdBreakObject(_adBreakInfo.name, 
                                         _adBreakInfo.position, 
                                         _adBreakInfo.startTime);

    // Ad Info - getting the adInfo from player and creating 
    // AdInfo Object from MediaHeartbeat
    var _adInfo = this._player.getAdInfo();
    var adInfo = 
      MediaHeartbeat.createAdObject(_adInfo.name, 
                                    _adInfo.id, 
                                    _adInfo.position, 
                                    _adInfo.length);

    // Set standard Ad Metadata
    var standardAdMetadata = {};
    standardAdMetadata[MediaHeartbeat.AdMetadataKeys.ADVERTISER] = 
      "Sample Advertiser";
    standardAdMetadata[MediaHeartbeat.AdMetadataKeys.CAMPAIGN_ID] = 
      "Sample Campaign";

    adInfo.setValue(MediaHeartbeat.MediaObjectKey.StandardAdMetadata, 
                    standardAdMetadata);

    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdBreakStart, 
                                    adBreakInfo);
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdStart, 
                                    adInfo, 
                                    adContextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L147"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note>Instead of setting the Standard Ad Metadata through the
           <codeph>AdobeAnalyticsPlugin.setVideoMetadata()</codeph> API, in VHL 2.0, the Standard Ad
          Metadata is set through the <codeph>AdMetadata</codeph> key
           <codeph>MediaObject.MediaObjectKey.StandardVideoMetadata</codeph></note>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Custom Ad Metadata</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_g1z_qrs_fbb">
          <li><codeph>AdobeAnalyticsPlugin.setAdMetadata()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_h1z_qrs_fbb">
          <li><codeph>MediaHeartbeat.createAdObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackAdStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdStart = 
  function() {
    console.log('Player event: AD_START');

    var contextData = {};
    // setting Standard Ad Metadata
    contextData[AdMetadataKeys.ADVERTISER] = 
      "sample advertiser";
    contextData[AdMetadataKeys.CAMPAIGN_ID] = 
      "sample campaign";
    contextData[AdMetadataKeys.CREATIVE_ID] = 
      "sample creative";
    contextData[AdMetadataKeys.CREATIVE_URL] = 
      "sample url";
    contextData[AdMetadataKeys.SITE_ID] = 
      "sample site";
    contextData[AdMetadataKeys.PLACEMENT_ID] = 
      "sample placement";

    this._aaPlugin.setAdMetadata(contextData);
    this._playerPlugin.trackAdStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L169"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdStart = 
  function() {
    console.log('Player event: AD_START');
    var adContextData = {
        affiliate: "Sample affiliate",
        campaign: "Sample ad campaign"
    };

    // AdBreak Info - getting the adBreakInfo from player and creating 
    // AdBreakInfo Object from MediaHeartbeat
    var _adBreakInfo = this._player.getAdBreakInfo();
    var adBreakInfo = 
      MediaHeartbeat.createAdBreakObject(_adBreakInfo.name, 
                                         _adBreakInfo.position, 
                                         _adBreakInfo.startTime);

    // Ad Info - getting the adInfo from player and creating 
    // AdInfo Object from MediaHeartbeat
    var _adInfo = this._player.getAdInfo();
    var adInfo = 
      MediaHeartbeat.createAdObject(_adInfo.name, 
                                    _adInfo.id, 
                                    _adInfo.position, 
                                    _adInfo.length);

    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdBreakStart, 
                                    adBreakInfo);
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdStart, 
                                    adInfo, 
                                    adContextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L147"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note>Instead of setting the Custom Ad Metadata through the
           <codeph>AdobeAnalyticsPlugin.setVideoMetadata</codeph> API, in VHL 2.0, the Standard Ad
          Metadata is set through the <codeph>MediaHeartbeat.trackAdStart()</codeph> API.</note>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Ad Skip</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_tpm_jss_fbb">
          <li><codeph>AdobeAnalyticsPlugin.setAdMetadata()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_upm_jss_fbb">
          <li><codeph>MediaHeartbeat.createAdObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackAdStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">SampleVideoPlayerPluginDelegate.prototype.getAdInfo = 
  function() {
    return this._player.getAdInfo();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.video.player.plugin.delegate.js#L31"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p>
          <codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdSkip = 
  function() {
    console.log('Player event: AD_SKIP');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdSkip);
  };</codeblock>
         </p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note>In VHL 1.5.X APIs; <codeph>getAdinfo()</codeph> and <codeph>getAdBreakInfo()</codeph>
          must return null if the player is outside the Ad break boundaries.</note>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Ad Complete</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_hwz_wss_fbb">
          <li><codeph>VideoPlayerPlugin.trackAdComplete()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_iwz_wss_fbb">
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdComplete)</codeph></li>
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdBreakComplete)</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdComplete = 
  function() {
    console.log('Player event: AD_COMPLETE');
    this._playerPlugin.trackAdComplete();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L185"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onAdComplete = 
  function() {
    console.log('Player event: AD_COMPLETE');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdComplete);
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.AdBreakComplete);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L173"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </p>
   <p>
    <table outputclass="codescroll" id="table_qpl_kts_fbb">
     <title>VHL Code Comparison: CHAPTER PLAYBACK</title>
     <tgroup cols="2">
      <colspec colname="col1" colnum="1" align="left"/>
      <colspec colname="col2" colnum="2" align="left"/>
      <thead>
       <row>
        <entry align="center">VHL 1.x</entry>
        <entry align="center">VHL 2.x</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <p><i><b>Chapter Start</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_rpl_kts_fbb">
          <li><codeph>VideoPlayerPluginDelegate.getChapterInfo()</codeph></li>
          <li><codeph>VideoPlayerPlugin.trackChapterStart()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_spl_kts_fbb">
          <li><codeph>MediaHeartbeat.createChapterObject </codeph></li>
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterStart) </codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterStart = 
  function() {
    console.log('Player event: CHAPTER_START');
    this._playerPlugin.trackChapterStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L190 "
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
         <p><codeblock outputclass="syntax javascript">SampleVideoPlayerPluginDelegate.prototype.getChapterInfo = 
  function() {
    return this._player.getChapterInfo();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.video.player.plugin.delegate.js#L35"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterStart = 
  function() {
    console.log('Player event: CHAPTER_START');
    var chapterContextData = { };

    // Chapter Info - getting the chapterInfo from player and creating 
    // ChapterInfo Object from MediaHeartbeat
    var _chapterInfo = this._player.getChapterInfo();
    var chapterInfo = 
      MediaHeartbeat.createChapterObject(_chapterInfo.name, 
                                         _chapterInfo.position, 
                                         _chapterInfo.length, 
                                         _chapterInfo.startTime);

    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterStart, 
                                    chapterInfo, 
                                    chapterContextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L179"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Chapter Skip</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_bf1_c5s_fbb">
          <li><codeph>VideoPlayerPluginDelegate.getChapterInfo()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_cf1_c5s_fbb">
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterSkip)</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">SampleVideoPlayerPluginDelegate.prototype.getChapterInfo = 
  function() {
    return this._player.getChapterInfo();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/sample.video.player.plugin.delegate.js#L35"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p>
          <codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterSkip = 
  function() {
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterSkip);
  };</codeblock>
         </p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note>In VHL 1.5.X APIs; <codeph>getChapterinfo()</codeph> must return null if the player
          is outside the Chapter boundaries.</note>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Chapter Custom Metadata</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_ekn_s5s_fbb">
          <li><codeph>VideoPlayerPlugin.trackChapterStart()</codeph></li>
          <li><codeph>AdobeAnalyticsPlugin.setChapterMetadata()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_fkn_s5s_fbb">
          <li><codeph>MediaHeartbeat.createChapterObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterStart)</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterStart = 
  function() {
    console.log('Player event: CHAPTER_START');
    this._aaPlugin.setChapterMetadata({
        segmentType: "Sample segment type"
    });
    this._playerPlugin.trackChapterStart();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L190"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterStart = 
  function() {
    console.log('Player event: CHAPTER_START');
    var chapterContextData = {
        segmentType: "Sample segment type"
    };

    // Chapter Info - getting the chapterInfo from player and creating 
    // ChapterInfo Object from MediaHeartbeat
    var _chapterInfo = this._player.getChapterInfo();
    var chapterInfo = 
      MediaHeartbeat.createChapterObject(_chapterInfo.name, 
                                         _chapterInfo.position, 
                                         _chapterInfo.length, 
                                         _chapterInfo.startTime);

    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterStart, 
                                    chapterInfo, 
                                    chapterContextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L179"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry namest="col1" nameend="col2">
         <note/>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Chapter Complete</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_qth_3vs_fbb">
          <li><codeph>trackChapterComplete()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_rth_3vs_fbb">
          <li><codeph>trackEvent(MediaHeartbeat.Event.ChapterComplete)</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterComplete = 
  function() {
    console.log('Player event: CHAPTER_COMPLETE');
    this._playerPlugin.trackChapterComplete();
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L198"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onChapterComplete = 
  function() {
    console.log('Player event: CHAPTER_COMPLETE');
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.ChapterComplete);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L192"
           format="html" scope="external">Sample Player 2.x</xref></p>
         <p>...</p>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </p>
   <p>
    <table outputclass="codescroll" id="table_opb_qvs_fbb">
     <title>VHL Code Comparison: OTHER EVENTS</title>
     <tgroup cols="2">
      <colspec colname="col1" colnum="1" align="left"/>
      <colspec colname="col2" colnum="2" align="left"/>
      <thead>
       <row>
        <entry align="center">VHL 1.x</entry>
        <entry align="center">VHL 2.x</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <p><i><b>Bitrate Change</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_ppb_qvs_fbb">
          <li><codeph>VideoPlayerPlugin.trackBitrateChange()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_qpb_qvs_fbb">
          <li><codeph>MediaHeartbeat.trackEvent(MediaHeartbeat.Event.BitrateChange) </codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p>
          <codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBitrateChange = 
  function() {
    console.log('Player event: BITRATE_CHANGE');
    // Update getQosInfo to return the updated bitrate
    this._playerPlugin.trackBitrateChange();
  };</codeblock>
         </p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onBitrateChange = 
  function() {
    console.log('Player event: BITRATE_CHANGE');
    // Update getQosObject to return the updated bitrate
    this._mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BitrateChange);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L198"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
       <row>
        <entry>
         <p><i><b>Video Resume</b></i></p>
         <p><b>1.x:</b></p>
         <ul id="ul_v4j_dws_fbb">
          <li><codeph>VideoInfo.resumed()</codeph></li>
          <li><codeph>VideoPlayerPluginDelegate.getVideoInfo()</codeph></li>
          <li><codeph>VideoPlayerPlugin.trackVideoLoad()</codeph></li>
         </ul>
        </entry>
        <entry>
         <p>... </p>
         <p><b>2.x:</b></p>
         <ul id="ul_w4j_dws_fbb">
          <li><codeph>MediaObject()</codeph></li>
          <li><codeph>MediaHeartbeat.trackSessionStart()</codeph></li>
         </ul>
        </entry>
       </row>
       <row>
        <entry>
         <p><codeblock outputclass="syntax javascript">this._videoInfo.resumed = true;</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/player/video.player.js#L207"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
         <p><codeblock outputclass="syntax javascript">VideoPlayer.prototype.getVideoInfo = 
  function() {
    this._videoInfo.playhead = vTime;
    return this._videoInfo;
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat/blob/master/sdks/js/samples/BasicPlayerSample/script/app/player/video.player.js#L96"
           format="html" scope="external">Sample 1.x Player</xref></p>
         <p>...</p>
        </entry>
        <entry>
         <p><codeblock outputclass="syntax javascript">VideoAnalyticsProvider.prototype._onLoad = 
  function() {
    console.log('Player event: VIDEO_LOAD');
    var contextData = {};

    var videoInfo = this._player.getVideoInfo();
    var mediaInfo = 
      MediaHeartbeat.createMediaObject(videoInfo.playerName, 
                                       videoInfo.id, 
                                       videoInfo.length,
                                       videoInfo.streamType);
    mediaInfo.setValue(MediaHeartbeat.MediaObjectKey.VideoResumed, 
                       true);

    this._mediaHeartbeat.trackSessionStart(mediaInfo, 
                                           contextData);
  };</codeblock><xref
           href="https://github.com/Adobe-Marketing-Cloud/video-heartbeat-v2/blob/master/sdks/js/samples/BasicPlayerSample/script/app/analytics/video.analytics.provider.js#L100"
           format="html" scope="external">Sample 2.x Player</xref></p>
         <p>...</p>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </p>
   <p>For more information on tracking video with 2.x, see <xref
     href="https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/c_vhl_track-core-vid-playback.html"
     format="html" scope="external">Track Core Video Playback</xref> in <i>Measuring Video in Adobe
     Analytics</i>.</p>
  </section>
  <section id="section_zqc_bjl_mbb">
   <title>VHL 1.x to 2.x API Conversion</title>
  </section>
  <example>
   <table id="table_uwx_dbw_s1b">
    <title>Required Track APIs:</title>
    <tgroup cols="2">
     <colspec colnum="1" colname="col1"/>
     <colspec colnum="2" colname="col2"/>
     <thead>
      <row>
       <entry align="center">VHL 1.x</entry>
       <entry align="center">VHL 2.x</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><codeph>videoPlayerPlugin.trackVideoLoad()</codeph></entry>
       <entry>N/A</entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackSessionStart()</codeph></entry>
       <entry><codeph><xref
          href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackSessionStart"
          format="html" scope="external">mediaHeartbeat.trackSessionStart(mediaObject,
          mediaCustomMetadata)</xref></codeph></entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackPlay()</codeph></entry>
       <entry><codeph><xref
          href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackPlay"
          format="html" scope="external">mediaHeartbeat.trackPlay()</xref></codeph></entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackPause()</codeph></entry>
       <entry><codeph><xref
          href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackPause"
          format="html" scope="external">mediaHeartbeat.trackPause()</xref></codeph></entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackComplete()</codeph></entry>
       <entry><codeph><xref
          href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackComplete"
          format="html" scope="external">mediaHeartbeat.trackComplete()</xref></codeph></entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackVideoUnload()</codeph></entry>
       <entry><codeph><xref
          href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackSessionEnd"
          format="html" scope="external">mediaHeartbeat.trackSessionEnd()</xref></codeph></entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackApplicationError()</codeph></entry>
       <entry>N/A</entry>
      </row>
      <row>
       <entry><codeph>videoPlayerPlugin.trackVideoPlayerError()</codeph></entry>
       <entry><codeph><xref
          href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackError"
          format="html" scope="external">mediaHeartbeat.trackError()</xref></codeph></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </example>
  <example>
   <p>All of the optional tracking APIs such as (Ads, Chapters, Bitrate change, Seeking, and
    Buffering) are now part of a single <codeph>trackEvent</codeph> API. The <codeph><xref
      href="https://adobe-marketing-cloud.github.io/video-heartbeat-v2/reference/javascript/MediaHeartbeat.html#trackEvent"
      format="html" scope="external">trackEvent</xref></codeph> API receives a constant parameter
    that represents the type of event that it is intended to track:</p>
   <p> </p>
   <table id="table_vhn_fbw_s1b">
    <title>Optional trackEvent APIs:</title>
    <tgroup cols="2">
     <colspec colnum="1" colname="col1"/>
     <colspec colnum="2" colname="col2"/>
     <thead>
      <row>
       <entry align="center">VHL 1.x</entry>
       <entry align="center">VHL 2.x</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Return a valid <codeph>AdBreakInfo</codeph> in
         <codeph>VideoPlayerPlugin.getAdBreakInfo()</codeph></entry>
       <entry><codeph>trackEvent(Event.AdBreakStart)</codeph></entry>
      </row>
      <row>
       <entry>Return null in <codeph>VideoPlayerPlugin.getAdBreakInfo()</codeph></entry>
       <entry><codeph>trackEvent(Event.AdBreakComplete)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackAdStart()</codeph></entry>
       <entry><codeph>trackEvent(Event.AdStart, adObject, adCustomMetadata)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackAdComplete()</codeph></entry>
       <entry><codeph>trackEvent(Event.AdComplete)</codeph></entry>
      </row>
      <row>
       <entry>Return null in <codeph>VideoPlayerPlugin.getAdInfo()</codeph></entry>
       <entry><codeph>trackEvent(Event.AdSkip)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackChapterStart()</codeph></entry>
       <entry><codeph>trackEvent(Event.ChapterStart, chapterObject,
        chapterCustomMetadata)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackChapterComplete()</codeph></entry>
       <entry><codeph>trackEvent(Event.ChapterComplete)</codeph></entry>
      </row>
      <row>
       <entry>Return null in <codeph>VideoPlayerPlugin.getChapterInfo()</codeph></entry>
       <entry><codeph>trackEvent(Event.ChapterSkip)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackSeekStart()</codeph></entry>
       <entry><codeph>trackEvent(Event.SeekStart)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackSeekComplete()</codeph></entry>
       <entry><codeph>trackEvent(Event.SeekComplete)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackBufferStart()</codeph></entry>
       <entry><codeph>trackEvent(Event.BufferStart)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackBufferComplete()</codeph></entry>
       <entry><codeph>trackEvent(Event.BufferComplete)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackBitrateChange()</codeph></entry>
       <entry><codeph>trackEvent(Event.BitrateChange)</codeph></entry>
      </row>
      <row>
       <entry><codeph>playerPlugin.trackTimedMetadata()</codeph></entry>
       <entry><codeph>trackEvent(Event.TimedMetadataUpdate)</codeph></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </example>
 </conbody>
</concept>
