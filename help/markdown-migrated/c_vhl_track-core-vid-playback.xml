<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_6E054B4369C944CDACB7199742185668">
  <title>Track Core Video Playback</title>
  <shortdesc>The following instructions provide guidance for implementation across all 2.x SDKs. </shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <keyword>Heartbeat Video</keyword>
        <keyword>Video Analytics</keyword>
      </keywords>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
    </metadata>
  </prolog>
  <conbody>
    <note type="important">If you are implementing a 1.x version of the SDK, you can download the
      1.x Developers Guide further down the page. </note>
    <p>This topic contains the following information: </p>
    <p>
      <ul id="ul_D84E802822744388A8135045E40CF93F">
        <li id="li_1A219326C9EB4DD0BED22A84AC8C6AB9"><xref
            href="c_vhl_track-core-vid-playback.xml#concept_6E054B4369C944CDACB7199742185668/section_904E0524877241939A0E0557E7395C4A"
            format="dita" scope="local">Overview</xref></li>
        <li id="li_B4389201A6BC470DA37547F01B911C52"><xref
            href="c_vhl_track-core-vid-playback.xml#concept_6E054B4369C944CDACB7199742185668/section_7E904B6243744A5A88BB729207796B31"
            format="dita" scope="local">Implement</xref></li>
        <li id="li_0E7273F336A74E23A41FB50B3D08C50D"><xref
            href="c_vhl_track-core-vid-playback.xml#concept_6E054B4369C944CDACB7199742185668/section_B58A8CD1650443F4B82483E6CB0EE894"
            format="dita" scope="local">Code</xref></li>
        <li id="li_9153F9C8C2F1455C839A65504FDD77ED"><xref
            href="c_vhl_track-core-vid-playback.xml#concept_6E054B4369C944CDACB7199742185668/section_ABCFB92C587B4CAABDACF93452EFA78F"
            format="dita" scope="local">Validate</xref></li>
      </ul>
    </p>
    <section id="section_904E0524877241939A0E0557E7395C4A">
      <title>Overview</title>
      <p>Core video playback includes tracking video starts, video completes, pausing, and
        scrubbing. Utilize the video player API to identify key player events and to populate the
        required and optional video variables. The following are the key elements of tracking video
        playback; details for each item are below: </p>
      <p>
        <b>On video load:</b>
      </p>
      <p>
        <ul id="ul_AB538AD299D94CF8A1D7DF16D58B5637">
          <li id="li_4B5CAABF0F5B422D9DEBB1191A42F487">Create the media object </li>
          <li id="li_8EAA67313FFA42289723252BA560F470">Populate the metadata </li>
          <li id="li_2FFFEEE6D95747B5AC5B6F4FCFB754CB">Call <codeph>trackSessionStart(mediaObject,
              contextData)</codeph></li>
        </ul>
      </p>
      <p>
        <b>On video start</b>: 
		</p>
      <ul id="ul_BFE17DC7D4F64FB79BF29CD6FAAF2F2C">
        <li id="li_E628237721E14819A69AB602EFE1458A">Call 
			 <codeph>trackPlay()</codeph></li>
      </ul>
      <p>
        <b>On video complete:</b>
      </p>
      <p>
        <ul id="ul_F747EB68F0F84B4D874BB207C30833AF">
          <li id="li_6CFD513C49564DA6AF09FD3AEBFC64F6">Call <codeph>trackComplete()</codeph></li>
          <li id="li_7E99C5E71CE34D468A77162B9C959D99">Call <codeph>trackSessionEnd()</codeph></li>
        </ul>
      </p>
      <p>
        <b>On video pause:</b>
      </p>
      <p>
        <ul id="ul_69B4660CFAB849599C41DFE6A41F0100">
          <li id="li_B2E438EA5FB642F6987F80ED2AF5EDCA">Call <codeph>trackPause()</codeph></li>
          <li id="li_65D1386B3D744B30A288A77451378A7B">Call <codeph>trackPlay()</codeph> when the
            video resumes </li>
        </ul>
      </p>
      <p>
        <b>On video scrub: </b>
      </p>
      <p>
        <ul id="ul_9C06D4174A3D4E58B34CF7AEA3BEF247">
          <li id="li_4B991F4BFD58494396D515023B8CA9E4">Call
              <codeph>trackEvent(MediaHeartbeat.Event.SeekStart)</codeph></li>
          <li id="li_5300F64F77DC45F5A920EF96B52839C6">Call
              <codeph>trackEvent(MediaHeartbeat.Event.SeekComplete)</codeph></li>
        </ul>
      </p>
      <p>
        <b>On video buffer: </b>
      </p>
      <p>
        <ul id="ul_C6E942CE6E324241B7182C22DC1AF058">
          <li id="li_DC3214F18ABA472FACAF3208EB679D35">Call
              <codeph>trackEvent(MediaHeartbeat.Event.BufferStart);</codeph></li>
          <li id="li_AD478668399041CA960B53B7D83A9A93">Call
              <codeph>trackEvent(MediaHeartbeat.Event.BufferComplete);</codeph></li>
        </ul>
      </p>
      <note type="tip">The playhead position is set as part of the set-up and configuration code.
        For more information about <codeph>getCurrentPlayheadTime()</codeph>, see <xref
          href="c_vhl_setup-and-config.xml#concept_425EDB4E08BA47EABBCDE3F02742EBD8" format="dita"
          scope="local"><?xm-replace_text Set up and Configure?></xref>. </note>
    </section>
    <section id="section_BB217BE6585D4EDEB34C198559575004">
      <title>Implement</title>
      <p>To implement core video playback: </p>
      <p>
        <ol id="ol_EC24597BCE644D2D92900DFD062338F0">
          <li id="li_3F0804574C7A425BA903DB63E5907239">Identify when the user triggers the intention
            of playback (user clicks play and/or autoplay is on) and create a
              <codeph>MediaObject</codeph> instance using the video information for video name,
            video ID, video length, and stream type. <p>Here is the <codeph>MediaObject</codeph>
              reference: <table id="table_65A53558C4EB449880C144F8A79C11A8">
                <tgroup cols="3">
                  <colspec colnum="1" colname="col1" colwidth="1*"/>
                  <colspec colnum="2" colname="col2" colwidth="1.5*"/>
                  <colspec colnum="3" colname="col3" colwidth="1*"/>
                  <thead>
                    <row>
                      <entry colname="col1">Variable Name </entry>
                      <entry colname="col2">Description </entry>
                      <entry colname="col3" align="center">Required </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry colname="col1"><codeph>name</codeph>
                      </entry>
                      <entry colname="col2">Video name </entry>
                      <entry colname="col3" align="center">Yes </entry>
                    </row>
                    <row>
                      <entry colname="col1"><codeph>mediaid</codeph>
                      </entry>
                      <entry colname="col2">Video unique identifier </entry>
                      <entry colname="col3" align="center">Yes </entry>
                    </row>
                    <row>
                      <entry colname="col1"><codeph>length</codeph>
                      </entry>
                      <entry colname="col2">Video length </entry>
                      <entry colname="col3" align="center">Yes </entry>
                    </row>
                    <row>
                      <entry colname="col1"><codeph>streamType</codeph>
                      </entry>
                      <entry colname="col2">Stream type (see <codeph>constants
                          MediaHeartbeat.StreamType.VOD</codeph>) </entry>
                      <entry colname="col3" align="center">Yes </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table></p><p>Here is the <codeph>MediaHeartbeat.StreamType.VOD</codeph> constants
              reference: <table id="table_F278C1BE16DD4893B7F0246DE4009CD4">
                <tgroup cols="2">
                  <colspec colnum="1" colname="col1" colwidth="1.00*"/>
                  <colspec colnum="2" colname="col2" colwidth="1.75*"/>
                  <thead>
                    <row>
                      <entry colname="col1">Constant Name </entry>
                      <entry colname="col2">Description </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry colname="col1"><codeph>VOD</codeph>
                      </entry>
                      <entry colname="col2">Stream type for Video on Demand. </entry>
                    </row>
                    <row>
                      <entry colname="col1"><codeph>LIVE</codeph>
                      </entry>
                      <entry colname="col2">Stream type for LIVE content. </entry>
                    </row>
                    <row>
                      <entry colname="col1"><codeph>LINEAR</codeph>
                      </entry>
                      <entry colname="col2">Stream type for LINEAR content. </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table></p><p>The general format for the <codeph>MediaObject</codeph> is
                <codeph>MediaHeartbeat.createMediaObject(&lt;VIDEO_NAME&gt;, &lt;VIDEO_ID&gt;,
                &lt;VIDEO_LENGTH&gt;, &lt;STREAM_TYPE&gt;.VOD); </codeph></p><p>
              <codeblock outputclass="syntax javascript">var mediaObject = 
  MediaHeartbeat.createMediaObject("Name", "ID", VIDEO_LENGTH, MediaHeartbeat.StreamType.VOD);</codeblock>
            </p></li>
          <li id="li_27ED9730C61641C7BA460461B5300D30">Attach all custom video metadata and standard
            video metadata to the video tracking session through context data variables. <p>For
              custom metadata, create a variable object for the custom variables and populate with
              the data for this video. For example:
              <codeblock outputclass="syntax javascript">/* Set custom context data */
var customVideoMetadata = {
    isUserLoggedIn: "false",
    tvStation: "Sample TV station",
    programmer: "Sample programmer"
};
</codeblock></p><p>For
              standard metadata, instantiate the <codeph>standardVideoMetdata</codeph> object and
              populate the desired variables. For a complete list of standard metadata variables,
              see <xref href="c_vhl_metrics-and-metadata.xml"/>. For example:
              <codeblock outputclass="syntax javascript">var standardVideoMetadata = {};
standardVideoMetadata[MediaHeartbeat.VideoMetadataKeys.EPISODE] = "Sample Episode";
standardVideoMetadata[MediaHeartbeat.VideoMetadataKeys.SHOW] = "Sample Show";
mediaObject.setValue(MediaHeartbeat.MediaObjectKey.StandardVideoMetadata, standardVideoMetadata);   
</codeblock></p><note
              type="tip">Attaching <codeph>standardVideoMetadata</codeph> to
                <codeph>mediaObject</codeph> is optional. </note></li>
          <li id="li_A69D6BE087CF44678C7C879C3E543106">To begin tracking a video session, call
              <codeph>trackSessionStart</codeph> in the <codeph>MediaHeartbeat</codeph> instance.
              <note type="tip">The second value is the custom video metadata object name that you
              created in step 2. </note><p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackSessionStart(mediaObject, customVideoMetadata);</codeblock>
            </p><note type="important"><codeph>trackSessionStart()</codeph> tracks the user
              intention of playback, not the beginning of the playback. This API is used to load the
              video data/metadata and to estimate the time-to-start QoS metric (the time duration
              between <codeph>trackSessionStart()</codeph> and <codeph>trackPlay()</codeph>).
              </note><note type="tip">If you are not using custom video metadata, simply send an
              empty object for the <codeph>data</codeph> argument in
                <codeph>trackSessionStart()</codeph>. For example:
                  <p><codeph>mediaHeartbeat.trackSessionStart(mediaObject,
            data)</codeph></p></note></li>
          <li id="li_326D1641FCFC416595EB18DAF45A5D2D">Identify the event from the video player for
            the beginning of the video playback, where the first frame of the video is rendered on
            the screen, and call <codeph>trackPlay()</codeph>: <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackPlay();</codeblock>
            </p></li>
          <li id="li_B22C1DA2A6B04534AFE94CC58DD3FB33">Identify the event from the video player for
            the completion of the video playback, where the user has watched the content until the
            end, and call <codeph>trackComplete()</codeph>: <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackComplete();</codeblock>
            </p></li>
          <li id="li_DBDE8362D3B54C169631D25A5535D9A0">Identify the event from the video player for
            the unloading/closing of the video playback, where the user closes the video and/or the
            video is completed and has been unloaded, and call <codeph>trackSessionEnd()</codeph>: <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackSessionEnd();</codeblock>
            </p><note type="important"><codeph>trackSessionEnd()</codeph> marks the end of a video
              tracking session. If the session was successfully watched to completion, where the
              user watched the content until the end, ensure that <codeph>trackComplete()</codeph>
              is called before <codeph>trackSessionEnd()</codeph>. Any other
                <codeph>track*()</codeph> API call is ignored after
                <codeph>trackSessionEnd()</codeph>, except for <codeph>trackSessionStart()</codeph>
              for a new video tracking session. </note></li>
          <li id="li_E7C8D43CC0874F61B9B07F3C4BB69248">Identify the event from the video player for
            video pause and call <codeph>trackPause()</codeph>. <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackPause();</codeblock>
            </p><note type="tip">Identify any scenario in which the Video Player will pause and make
              sure that <codeph>trackPause()</codeph> is properly called. Sample scenarios include
              when an application goes to the background or the player automatically pauses because
              of a mobile interrupt. </note></li>
          <li id="li_72854154A8154BD2AD9CA6486AA1DC89">Identify the event from the video player for
            video play and/or video resume from pause and call <codeph>trackPlay()</codeph>. <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackPlay();</codeblock>
            </p></li>
          <li id="li_637894C7E4294762994F7DD7C94C755C">Identify the event from the video player for
            scrubbing/seeking and utilize a custom <codeph>MediaHeartbeat</codeph> event to capture
            the action. <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart);</codeblock>
            </p></li>
          <li id="li_EBC8514E061E47819D5C312B11F93DF3">Identify the event from the video player for
            video play and/or video resume from scrubbing/seeking and use a second custom
              <codeph>MediaHeartbeat</codeph> event. <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete)</codeblock>
            </p></li>
          <li id="li_D4B3198ACACE4C9693426A3F6E8EAEE0">Listen for playback buffering to start and
            use a custom <codeph>MediaHeartbeat</codeph> event to capture the change. <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackEvent (MediaHeartbeat.Event.BufferStart);</codeblock>
            </p></li>
          <li id="li_D92F44A81E3D4703809DB529570CF368">Identify when buffering ends and call the
              <codeph>MediaHeartbeat</codeph> event to capture the change. <p>
              <codeblock outputclass="syntax javascript">mediaHeartbeat.trackEvent (MediaHeartbeat.Event.BufferComplete);</codeblock>
            </p></li>
        </ol>
      </p>
      <p>The following sample code uses the JavaScript 2.x SDK for an HTML5 video player:
        <codeblock outputclass="syntax javascript">/* Call on video start */
if (e.type == "play") {

    // Check for start of video
    if (mediaOffset == 0) {
        /* Set media info */    
        /* MediaHeartbeat.createMediaObject(&lt;VIDEO_NAME>, 
                                            &lt;VIDEO_ID>, 
                                            &lt;VIDEO_LENGTH>,
                                            MediaHeartbeat.StreamType.VOD);*/
        var mediaInfo = MediaHeartbeat.createMediaObject(
          document.getElementsByTagName('video')[0].getAttribute("name"), 
          document.getElementsByTagName('video')[0].getAttribute("id"), 
          video.duration,
          MediaHeartbeat.StreamType.VOD);

        /* Set custom context data */
        var customVideoMetadata = {
            isUserLoggedIn: "false",
            tvStation: "Sample TV station",
            programmer: "Sample programmer"
        };

        /* Set standard video metadata */    
        var standardVideoMetadata = {};
        standardVideoMetadata[MediaHeartbeat.VideoMetadataKeys.EPISODE] = "Sample Episode";
        standardVideoMetadata[MediaHeartbeat.VideoMetadataKeys.SHOW] = "Sample Show";
        mediaInfo.setValue(MediaHeartbeat.MediaObjectKey.StandardVideoMetadata, 
                           standardVideoMetadata);    

        // Start Session
        this.mediaHeartbeat.trackSessionStart(mediaInfo, customVideoMetadata);   

        // Track play
        this.mediaHeartbeat.trackPlay();     

    } else {
        // Track play for resuming playack   
        this.mediaHeartbeat.trackPlay(); 
    }
};

/* Call on video complete */
if (e.type == "ended") {
    console.log("video ended");
    this.mediaHeartbeat.trackComplete();
    this.mediaHeartbeat.trackSessionEnd();
    mediaOffset = 0;    
};

/* Call on pause */
if (e.type == "pause") {
    this.mediaHeartbeat.trackPause();
};

/* Call on scrub start */
if (e.type == "seeking") {
    this.mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart);
};
    
/* Call on scrub stop */
if (e.type == "seeked") {
    this.mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete);
};

/* Call on buffer start */
if (e.type == “buffering”) {
    this.mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferStart);
};

/* Call on buffer complete */
if (e.type == “buffering end”) {
    this.mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete);
};
</codeblock></p>
    </section>
    <section id="section_B58A8CD1650443F4B82483E6CB0EE894">
      <title>Code</title>
      <table id="table_1FC1BC9FE48C4B8699B84EE4138315D5">
        <tgroup cols="3" rowsep="1">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="1.62*" />
          <colspec colname="col3" colnum="3" colwidth="4.78*" />
          <thead>
            <row>
              <entry namest="col1" nameend="col2">Video Analytics 2.x SDKs 
				  </entry>
              <entry colname="col3">Developer Guides 
				  </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry namest="col1" nameend="col2">Android/FireTV 
				  </entry>
              <entry colname="col3">
                <xref href="https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/android_2.0/t_vhl_track-core-playback_android.html" format="html" scope="external">Track Core for Android</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">iOS/AppleTV 
				  </entry>
              <entry colname="col3">
                <xref href="https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/ios_2.0/t_vhl_track-core-playback_ios.html" format="html" scope="external">Track Core for iOS</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">JavaScript 
				  </entry>
              <entry colname="col3">
                <xref href="https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/js_2.0/t_vhl_track-core-playback_js.html" format="html" scope="external">Track Core for JavaScript</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">Roku 
				  </entry>
              <entry colname="col3">
                <xref href="https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/roku/c_vhl_conf-med-hrbts.html" format="html" scope="external">Track Core for Roku</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">Chromecast</entry>
              <entry colname="col3"><xref
                  href="https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/chromecast/c_vhl_conf-med-hrbts-chromecast.html"
                  format="html" scope="external">Track Core for Chromecast</xref></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table id="table_DCD074D23E704CA79BC3734D1CF59A5B">
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="1.55*" />
          <colspec colname="col3" colnum="3" colwidth="4.74*" />
          <thead>
            <row>
              <entry namest="col1" nameend="col2">Video Analytics 1.x SDKs* 
				  </entry>
              <entry colname="col3">Developer Guides 
				  </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry namest="col1" nameend="col2">Android 
				  </entry>
              <entry colname="col3">
                <xref href="vhl-dev-guide-v15_android.pdf" format="pdf" scope="peer">Track Core for Android</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">AppleTV 
				  </entry>
              <entry colname="col3">
                <xref href="vhl-dev-guide-v1x_appletv.pdf" format="pdf" scope="peer">Track Core for AppleTV</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">Chromecast 
				  </entry>
              <entry colname="col3">
                <xref href="chromecast_1.x_sdk.pdf" format="pdf" scope="peer">Track Core for Chromecast</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">iOS 
				  </entry>
              <entry colname="col3">
                <xref href="vhl-dev-guide-v15_ios.pdf" format="pdf" scope="peer">Track Core for iOS</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">JavaScript 
				  </entry>
              <entry colname="col3">
                <xref href="vhl-dev-guide-v15_js.pdf" format="pdf" scope="peer">Track Core for JavaScript</xref>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">Primetime 
				  </entry>
              <entry colname="col3">
                <ul id="ul_AE4FACC564D84FAF8BF241912B5D7761">
                  <li id="li_372AFC4170B546E9867C160DBAAC0A5E">
                    <b>Android</b>: 
						  <xref href="http://help.adobe.com/en_US/primetime/psdk/android/1.4/index.html#PSDKs-task-Initialize_and_configure_video_analytics_" format="html" scope="external">Configure Video Analytics</xref></li>
                  <li id="li_224523B07B224A5099F18F06B0D14C87">
                    <b>DHLS</b>: 
						  <xref href="http://help.adobe.com/en_US/primetime/psdk/dhls/index.html#PSDKs-task-Initialize_and_configure_video_analytics_ " format="html" scope="external">Configure Video Analytics</xref></li>
                  <li id="li_C6A942B9468E45F0A9B1FA7CEF667BAF">
                    <b>iOS</b>: 
						  <xref href="http://help.adobe.com/en_US/primetime/psdk/ios/1.4/index.html#PSDKs-task-Initialize_and_configure_video_analytics_" format="html" scope="external">Configure Video Analytics</xref></li>
                </ul>
              </entry>
            </row>
            <row>
              <entry namest="col1" nameend="col2">TVML 
				  </entry>
              <entry colname="col3">
                <xref href="vhl_tvml.pdf" format="pdf" scope="peer">Track Core for TVML</xref>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p>
        <b>*</b> For all 1.x SDKs, the links are for the full PDF download of
		  the documentation. 
		</p>
    </section>
    <section id="section_ABCFB92C587B4CAABDACF93452EFA78F">
      <title>Validate</title>
      <p>
        <b>Video Start</b>
      </p>
      <p>On start of a video player, these key calls are sent in the following order: </p>
      <p>
        <ol id="ol_9C3DA2E1A0ED47FA83F7CB9ED9B4988D">
          <li id="li_E3B040FF58BA4F1DB6AF2A0BB4E0989A">Video analytics start<b>*</b></li>
          <li id="li_903A40E943C0401D9962383907BD3D49">Heartbeat start<b>*</b></li>
          <li id="li_CD7ECBBC15524B0B949EA6C8A0584569">Heartbeat analytics start </li>
        </ol>
      </p>
      <p>
        <b>*</b>These calls contain additional metadata variables for both
		  custom and standard. 
		</p>
      <p>
        <b>Content Play</b>
      </p>
      <p>During regular main content playback, Heartbeat calls are sent to the
		  Heartbeat server every ten seconds. 
		</p>
      <p>
        <b>Video Complete</b>
      </p>
      <p>At the 100% point, on a video or at a show boundary on a linear
		  stream, a Heartbeat complete call will be sent. 
		</p>
      <p>
        <b>Content Pause</b>
      </p>
      <p>When the video player pauses, video player pause event calls will be
		  sent every 10 seconds. After pause ends, the play events should resume. 
		</p>
      <p>
        <b>Content Scrub/Seek</b>
      </p>
      <p>On scrubbing of the video playhead, no special tracking calls are
		  sent. However, when video playback resumes after scrubbing, the playhead value
		  should reflect the new position in the main content. 
		</p>
      <p>
        <b>Content Buffer</b>
      </p>
      <p>When the video player buffers, video player buffer event calls will be
		  sent every 10 seconds. After buffer ends, the play events should resume. 
		</p>
    </section>
  </conbody>
</concept>